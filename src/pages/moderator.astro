---
import Layout from '../layouts/Layout.astro';
import ShoppingCartButton from '../components/ShoppingCartButton.astro';
import ShoppingCart from '../components/ShoppingCart.astro';
import ProductList from '../components/ProductList.astro';
import ProductDialog from '../components/ProductDialog.astro';

import uuid from 'uuid-random';
import jsonwebtoken from 'jsonwebtoken';

export const prerender = false;

const SHP_ARCHIVE_TOKEN = '6b98671c3560340427f4a1baeaf7ef69';
const SHP_SHOP_TOKEN = '7766fe447c722c1317e528bdc92f1f2d';

const generate = (privateKey, { id, name, email, avatar, appId, kid, moderator }) => {
    const now = new Date();
    const jwt = jsonwebtoken.sign(
        {
            aud: 'jitsi',
            context: {
                user: {
                    id,
                    name,
                    avatar,
                    email: email,
                    moderator: moderator ? 'true' : 'false'
                },
                features: {
                    livestreaming: 'true',
                    recording: 'true',
                    transcription: 'true',
                    'outbound-call': 'true'
                }
            },
            iss: 'chat',
            room: '*',
            sub: appId,
            exp: Math.round(now.setHours(now.getHours() + 3) / 1000),
            nbf: Math.round(new Date().getTime() / 1000) - 10
        },
        privateKey,
        { algorithm: 'RS256', header: { kid } }
    );
    return jwt;
};

const jitsi_jwt_token = generate(
    `-----BEGIN PRIVATE KEY-----${process.env.JITSI_API_SECRET.replace(/-----[\w\s]+-----/g, '')
        .split(/\s/)
        .join('\n')}-----END PRIVATE KEY-----`,
    {
        id: uuid(),
        name: 'KIOSK',
        email: 'marco@kioskkiosk.com',
        avatar: 'my avatar url',
        appId: process.env.JITSI_API_APPID, // Your AppID ( previously tenant )
        kid: process.env.JITSI_API_KEY,
        moderator: true
    }
);
const configOverwrite = {
    apiLogLevels: ['error'],
    // toolbarButtons: ['microphone', 'camera', 'hangup', 'tileview'],
    prejoinPageEnabled: false,
    disabledNotifications: ['notify.chatMessages'],
    virtualBackgrounds: ['kbg1.jpg', 'kbg2.jpg' /*'kbg3.jpg', 'kbg4.jpg', 'kbg5.jpg', 'kbg6.jpg', 'kbg7.jpg', 'kbg8.jpg', 'kbg9.jpg', 'kbg10.jpg'*/].map(
        (im) => `https://headroom.kioskkiosk.com/images/${im}`
    )
};
const Jitsi = {
    Jaas: {
        domain: '8x8.vc',
        magicCookie: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574',
        roomName: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/KIOSK_Headroom',
        dynamicBrandingUrl: 'https://headroom.kioskkiosk.com/branding.json',
        jwt: jitsi_jwt_token
    },
    Self: {
        domain: 'jitsi-headroom-1-u25913.vm.elestio.app/',
        roomName: 'KIOSK_Headroom',
        jwt: null
    }
}.Self;
---

<Layout title="Headroom Moderator" classList="">
    <div class="grid h-screen grid-rows-[1fr,auto]">
        <div class="grid grid-cols-[1fr,auto] grid-flow-col w-full h-full font-mono text-xs border-black flex grow">
            <main class="bg-cyan-400 border-r border-black grid text-3xl font-bold font-sans">
                <div id="jaas-container" class="h-full"></div>
            </main>

            <aside class="w-20 lg:w-40 grid grid-flow-row grid-rows-[1fr,auto] bg-pink-300">
                <section x-data="{activeProduct:null}" class="overflow-scroll max-h-[calc(100vh-10rem)]" class="relative">
                    <ProductDialog />
                    <ProductList />
                </section>
                <section class="bg-green-300 h-20 lg:h-40 border-t border-black place-content-center grid text-xs lg:text-lg">
                    <ShoppingCartButton
                        >[CART<span x-show="Alpine.store('globalCart').lines.length" x-text="`(${Alpine.store('globalCart').totalQuantity})`"
                        ></span>]</ShoppingCartButton
                    >
                    <div x-show="Alpine.store('moderator')" class="text-center">MOD</div>
                </section>
            </aside>
        </div>
        <div class="bg-red-100 min-h-16 text-black text-lg grid place-items-center" x-data>
            <div class="text-xl">PRODUCT: <input type="text" @keyup.enter="handleMessage({message:'/s '+$el.value});$el.value=''" /></div>
        </div>
    </div>
    <ShoppingCart />
</Layout>
<script async src={`https://${[Jitsi.domain, Jitsi.magicCookie || '', 'external_api.js'].join('/')}`}></script>
<script define:vars={{ jitsi_jwt_token, configOverwrite, Jitsi }}>
    window.addEventListener('load', () => {
        window.jitsi = new JitsiMeetExternalAPI(Jitsi.domain, {
            roomName: `${Jitsi.magicCookie || ''}/KIOSK_Headroom`,
            parentNode: document.querySelector('#jaas-container'),
            dynamicBrandingUrl: 'https://headroom.netlify.app/branding.json',
            jwt: configOverwrite.jwt,
            configOverwrite,
            interfaceConfigOverwrite: {
                APP_NAME: 'KIOSK',
                DEFAULT_LOGO_URL: 'https://headroom.kioskkiosk.com/images/KIOSK-Logo.png',
                DEFAULT_REMOTE_DISPLAY_NAME: ' ❤️ ',
                BRAND_WATERMARK_LINK: 'https://kioskkiosk.com',
                SHOW_JITSI_WATERMARK: false,
                HIDE_DEEP_LINKING_LOGO: true,
                SHOW_POWERED_BY: false,
                SHOW_DEEP_LINKING_IMAGE: false,
                SHOW_BRAND_WATERMARK: false
            }
        });
        let messageOrder = 0;
        handleMessage = async (e) => {
            const re = new RegExp('/(?<cmd>[a-z]+)\\s?(?<order>:\\d+)?\\s?(?<args>.*)?');
            const res = re.exec(e.message || e.subject);
            let cmd = res.groups.cmd;
            let order = res.groups.order;
            let args = res.groups.args;
            if (args == '...') {
                cmd = '...';
            }

            if (res != null) {
                switch (cmd) {
                    case 's':
                        let products = await suggestProducts(args);
                        if (products.length > 0) {
                            let product = products.at(0);
                            products.at(0).order ??= messageOrder++;
                            let local_products = Alpine.store('products');
                            local_products = local_products.filter((p) => p.id !== product.id);
                            local_products.unshift(product);
                            local_products = distinct(Alpine.store('products'), 'id');
                            local_products = local_products.sort((a, b) => b.order - a.order);
                            Alpine.store('products', local_products);
                            jitsi.executeCommand('sendChatMessage', `/addproduct :${messageOrder} ${products.at(0).title}`, '', false); //send to listeners
                        }
                        break;
                    case 'addproduct':
                        let products2 = await suggestProducts(args);
                        if (products2.length > 0) {
                            products2.at(0).order = order.replace(/:/, '');
                            let local_products = Alpine.store('products');
                            local_products = local_products.filter((p) => p.id !== products2.at(0).id);
                            local_products.unshift(products2.at(0));
                            local_products = local_products.sort((a, b) => b.order - a.order);
                            Alpine.store('products', local_products);
                        }
                        break;
                    case '...':
                        let local_products2 = Alpine.store('products').filter((p) => true);
                        local_products2.shift();
                        Alpine.store('products', local_products2);
                        jitsi.executeCommand('sendChatMessage', `/shift`, '', false); //send to listeners
                        break;

                    case 'log':
                        break;
                }
            }
        };
        jitsi.addListener('incomingMessage', handleMessage);
        jitsi.addListener('outgoingMessage', handleMessage);
        jitsi.addListener('participantRoleChanged', async (e) => {
            moderators.push(e.id);
            participants.filter((p) => p.id !== e.id);
            window.ismoderator = e.role === 'moderator';
            Alpine.store('moderator', window.ismoderator);
        });
        jitsi.addListener('participantJoined', async (e) => {
            participants.push({ id: e.id, name: jitsi._participants[e.id].formattedDisplayName, order: participantCounter++ });
            for (let i = 0; i < participants.length; i++) {
                jitsi.executeCommand('sendChatMessage', `/queuenumber ${i + 1}`, participants.at(i).id, false); //send to listeners
            }
        });
        jitsi.addListener('participantLeft', async (e) => {
            participants = participants.filter((p) => p.id !== e.id);
            for (let i = 0; i < participants.length; i++) {
                jitsi.executeCommand('sendChatMessage', `/queuenumber ${i + 1}`, participants.at(i).id, false); //send to listeners
            }
        });
    });
    let distinct = (array, key) => [...new Map(array.map((item) => [item[key], item])).values()];
    window.participants = [];
    let moderators = [];
    let participantCounter = 0;

    setInterval(() => {
        fetch('/set-here.json')
            .then((res) => res.json())
            .then((data) => {
                if (data) {
                    console.log(data);
                }
            });
    }, 1000);
</script>
