---
import Layout from '../layouts/Layout.astro';
import ShoppingCart from '../components/ShoppingCart.astro';
import ShoppingCartButton from '../components/ShoppingCartButton.astro';
import ProductList from '../components/ProductList.astro';
import ProductDialog from '../components/ProductDialog.astro';

import { getStore } from '@netlify/blobs';
import uuid from 'uuid-random';
import jsonwebtoken from 'jsonwebtoken';

export const prerender = false;

const SHP_ARCHIVE_TOKEN = '6b98671c3560340427f4a1baeaf7ef69';
const SHP_SHOP_TOKEN = '7766fe447c722c1317e528bdc92f1f2d';

const generate = (privateKey, { id, name, email, avatar, appId, kid, moderator }) => {
    const now = new Date();
    const jwt = jsonwebtoken.sign(
        {
            aud: 'jitsi',
            context: {
                user: {
                    id,
                    name,
                    avatar,
                    email: email,
                    moderator: moderator ? 'true' : 'false'
                },
                features: {
                    livestreaming: 'true',
                    recording: 'true',
                    transcription: 'true',
                    'outbound-call': 'true'
                }
            },
            iss: 'chat',
            room: '*',
            sub: appId,
            exp: Math.round(now.setHours(now.getHours() + 3) / 1000),
            nbf: Math.round(new Date().getTime() / 1000) - 10
        },
        privateKey,
        { algorithm: 'RS256', header: { kid } }
    );
    return jwt;
};
const sweet_names = ['Darling', 'Hunny', 'Love', 'Pretty', 'Precious', 'Sweetie', 'Handsome', 'Hugball', 'Twinkles'];
const store = getStore({ name: 'clients', consistency: 'strong' });
const counter = parseInt(await store.get('counter')) || 0;
//const random_name = sweet_names[counter % sweet_names.length];
const random_name = 'HELLO';
await store.set('counter', counter + 1);
const jitsi_jwt_token = generate(
    `-----BEGIN PRIVATE KEY-----${process.env.JITSI_API_SECRET.replace(/-----[\w\s]+-----/g, '')
        .split(/\s/)
        .join('\n')}-----END PRIVATE KEY-----`,
    {
        id: uuid(),
        name: random_name,
        email: 'kiosk@kioskkiosk.com',
        avatar: 'my avatar url',
        appId: process.env.JITSI_API_APPID,
        kid: process.env.JITSI_API_KEY,
        moderator: false
    }
);

const configOverwrite = {
    apiLogLevels: ['error'],
    toolbarButtons: ['microphone', 'camera', 'hangup', 'tileview'],
    prejoinPageEnabled: false,
    disabledNotifications: ['notify.chatMessages'],
    userInfo: {
        email: '',
        displayName: random_name
    },
    BRAND_WATERMARK_LINK: 'https://kioskkiosk.com',
    interfaceConfigOverwrite: {
        APP_NAME: 'KIOSK',
        DEFAULT_BACKGROUND: '#FFBBBB',
        LANG_DETECTION: false,
        //MOBILE_APP_PROMO: true,
        //SHOW_BRAND_WATERMARK: false,
        DEFAULT_LOGO_URL: 'https://headroom.kioskkiosk.com/images/KIOSK-Logo.png',
        DEFAULT_REMOTE_DISPLAY_NAME: '❤️',
        BRAND_WATERMARK_LINK: 'https://kioskkiosk.com',
        SHOW_JITSI_WATERMARK: false,
        HIDE_DEEP_LINKING_LOGO: true,
        SHOW_POWERED_BY: false,
        SHOW_DEEP_LINKING_IMAGE: false,
        SHOW_BRAND_WATERMARK: false
    }
};
const Jitsi = {
    Jaas: {
        domain: '8x8.vc',
        magicCookie: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574',
        roomName: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/KIOSK_Headroom',
        //dynamicBrandingUrl: 'https://headroom.netlify.app/branding.json',
        lang: 'en',
        jwt: jitsi_jwt_token
    },
    Self: {
        domain: 'jitsi-headroom-1-u25913.vm.elestio.app/',
        roomName: 'KIOSK_Headroom',
        lang: 'en',
        jwt: null
    }
}.Self;
---

<Layout title="KIOSK: Headroom" classList="">
    <div class="grid grid-cols-[1fr,auto] grid-flow-col w-full h-svh text-xs border-black xflex xgrow overflow-hidden">
        <main class="bg-cyan-400 border-r border-black grid text-3xl font-bold font-sans">
            <div id="jaas-container" class="h-svh"></div>
        </main>

        <aside class="w-20 lg:w-40 grid grid-flow-row grid-rows-[1fr,auto] bg-pink-300">
            <section x-data="{activeProduct:null}" class="overflow-scroll max-h-[calc(100vh-10rem)]">
                <ProductDialog />
                <ProductList />
            </section>
            <section class="bg-green-300 h-20 lg:h-40 border-t border-black place-content-center grid text-xs lg:text-lg">
                <ShoppingCartButton
                    >[CART<span x-show="Alpine.store('globalCart').lines.length" x-text="`(${Alpine.store('globalCart').totalQuantity})`"
                    ></span>]</ShoppingCartButton
                >
                <div x-show="Alpine.store('moderator')" class="text-center">MOD</div>
            </section>
        </aside>
    </div>
    <ShoppingCart />
</Layout>
<script async src={`https://${[Jitsi.domain, Jitsi.magicCookie || '', 'external_api.js'].join('/')}`}></script>
<script define:vars={{ jitsi_jwt_token, configOverwrite, Jitsi }}>
    window.addEventListener('load', () => {
        window.jitsi = new JitsiMeetExternalAPI(Jitsi.domain, {
            roomName: `${Jitsi.magicCookie || ''}/KIOSK_Headroom`,
            parentNode: document.querySelector('#jaas-container'),
            dynamicBrandingUrl: 'https://headroom.netlify.app/branding.json',
            jwt: configOverwrite.jwt,
            configOverwrite,
            interfaceConfigOverwrite: {
                APP_NAME: 'KIOSK',
                DEFAULT_LOGO_URL: 'https://headroom.kioskkiosk.com/images/KIOSK-Logo.png',
                DEFAULT_REMOTE_DISPLAY_NAME: ' ❤️ ',
                BRAND_WATERMARK_LINK: 'https://kioskkiosk.com',
                SHOW_JITSI_WATERMARK: false,
                HIDE_DEEP_LINKING_LOGO: true,
                SHOW_POWERED_BY: false,
                SHOW_DEEP_LINKING_IMAGE: false,
                SHOW_BRAND_WATERMARK: false
            }
        });
        let messageCounter = 0;
        handleMessage = async (e) => {
            const re = new RegExp('/(?<cmd>[a-z]+)\\s?(?<order>:\\d+)?\\s?(?<args>.*)?');
            const res = re.exec(e.message || e.subject);
            console.log('match:', res, e.message, re);
            if (res != null) {
                switch (res.groups.cmd) {
                    case 'addproduct':
                        let order = res.groups.order;
                        console.log('got addproduct:', res.groups.args, order);
                        let products = await suggestProducts(res.groups.args);
                        if (products.length > 0) {
                            products.at(0).order = order.replace(/:/, '');
                            let local_products = Alpine.store('products');
                            local_products = local_products.filter((p) => p.id !== products.at(0).id);
                            local_products.unshift(products.at(0));
                            local_products = local_products.sort((a, b) => b.order - a.order);
                            Alpine.store('products', local_products);

                            console.log('added product:', order, products.at(0));
                        }
                        break;
                    case 'log':
                        console.log('got log:', res.groups.args, e.message);
                        break;
                    case 'shift':
                        let local_products2 = Alpine.store('products').filter((p) => true);
                        local_products2.shift();
                        Alpine.store('products', local_products2);

                        //Alpine.store('products', Alpine.store('products').shift());
                        break;
                    case 'queuenumber':
                        _log('queuenumber', e, res);
                        jitsi.executeCommand('displayName', numberToOrdinal(parseInt(res.groups.args)));
                        break;
                    case 'setParticipantOrder':
                        let participantOrder = res.groups.args.split(',');
                        console.log('got setorder:', res.groups.args, e.message);
                        setParticipantOrder(participantOrder);

                        // // pin moderators
                        // let participants = jitsi.getParticipantsInfo();
                        // participants.forEach((p) => {
                        //     if (p.role === 'moderator') {
                        //         jitsi.executeCommand('pinParticipant', p.id);
                        //     }
                        // });
                        // // set order
                        // participants.forEach((p) => {
                        //     let order = participantOrder.indexOf(p.id);
                        //     if (order >= 0 && p.role !== 'moderator') {
                        //         // set displayName to order in the form of First, Next, 3rd, 4th, etc.
                        //         jitsi.executeCommand('setDisplayName', { displayName: `${order + 1}${['st', 'nd', 'rd'][order] || 'th'}` });
                        //     }
                        // });
                        // // set volume to .5 if not the first 3 including moderators
                        // participants.forEach((p) => {
                        //     let order = participantOrder.indexOf(p.id);
                        //     if (order >= 3 && p.role !== 'moderator') {
                        //         jitsi.executeCommand('setParticipantVolume', { participantId: p.id, volume: 0.5 });
                        //     }
                        // });
                        break;
                }
            }
        };

        jitsi.addListener('incomingMessage', handleMessage);

        jitsi.addListener('participantRoleChanged', async (e) => {
            _log('participantRoleChanged', e);
            moderators.push(e.id);
            participants.filter((p) => p.id !== e.id);
            window.ismoderator = e.role === 'moderator';
            Alpine.store('moderator', window.ismoderator);
        });
        // jitsi.addListener('participantJoined', async (e) => {
        //     console.log('participantJoined', e, jitsi._participants[e.id].displayName);
        //     // let _p = jitsi.getParticipantsInfo().map((e) => ({ id: e.id, name: jitsi._participants[e.id].displayName }));
        //     participants.push({ id: e.id, name: jitsi._participants[e.id].displayName, order: participantCounter++ });
        //     participants.sort((a, b) => b.order - a.order);
        //     for (let i = 0; i < 4; i++) {
        //         jitsi.executeCommand('pinParticipant', participants.at(i).id);
        //         console.log('pinning', participants.at(i).id, participants.at(i).name);
        //     }
        //     for (let i = 4; i < participants.length; i++) {
        //         jitsi.executeCommand('setParticipantVolume', participants.at(i).id, 0.5);
        //         console.log('muting', participants.at(i).id, participants.at(i).name);
        //     }
        //     for (let i = 0; i < participants.length; i++) {
        //         jitsi.executeCommand('displayName', `# ${i + 1}`);
        //         console.log('setting name', participants.at(i).id, participants.at(i).name, `# ${i + 1}`);
        //     }
        // });
        // jitsi.addListener('participantLeft', async (e) => {
        //     console.log('participantLeft', e);
        //     participants = participants.filter((p) => p.id !== e.id);
        //     for (let i = 0; i < 4; i++) {
        //         jitsi.executeCommand('pinParticipant', participants.at(i).id);
        //     }
        //     for (let i = 4; i < participants.length; i++) {
        //         jitsi.executeCommand('setParticipantVolume', participants.at(i).id, 0.5);
        //     }
        //     for (let i = 0; i < participants.length; i++) {
        //         jitsi.executeCommand('displayName', `# ${i + 1}`);
        //     }
        // });
    });
    let distinct = (array, key) => [...new Map(array.map((item) => [item[key], item])).values()];
    let participants = [];
    let moderators = [];
    let participantCounter = 0;
    function numberToOrdinal(n) {
        const s = ['th', 'st', 'nd', 'rd'],
            v = n % 100;
        return n + (s[(v - 20) % 10] || s[v] || s[0]);
    }
</script>
